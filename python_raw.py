import numpy as np
import os
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sb
import re
from datetime import datetime

def rename_products(list_of_products):
    products_label = []
    for products in list_of_products:
        #print(products)
        products = re.sub('_linux$', '', products)
        products = products.replace('_', '\n')
        products = products.title()
        products_label.append(products)
    return products_label

project_folder = os.getcwd()

## Reading datasets
cve_df = pd.read_csv(f'{project_folder}\\data\\cve.csv')
products_df = pd.read_csv(f'{project_folder}\\data\\products.csv')
vendors_df = pd.read_csv(f'{project_folder}\\data\\vendors.csv')
vendors_products_df = pd.read_csv(f'{project_folder}\\data\\vendor_product.csv')


# data cleaning

# CVE dataset
# print(cve_df.info())

for col in ['access_authentication', 'access_complexity', 'access_vector', 'impact_availability', 'impact_confidentiality', 'impact_integrity']:
    cve_df[col].fillna('NONE', inplace=True)

# print(cve_df.info())

cve_df.rename(columns={'Unnamed: 0': 'cve_id'}, inplace=True)

#print(cve_df.info())

# Product dataset
# print(products_df.info())

# print(sum(products_df['vulnerable_product'].isnull()))

products_df.dropna(inplace=True)

#print(products_df.info())

# Vendor dataset
# print(vendors_df.info())
vendors_df.rename(columns={'Unnamed: 0': 'cve_id'}, inplace=True)
# print(vendors_df.info())

# print(sum(vendors_df['vendor'].isnull()))

vendors_df.dropna(inplace=True)

#print(vendors_df.info())

# Vendor products
# print(vendors_products_df.info())
vendors_products_df.rename(columns={'Unnamed: 0': 'id'}, inplace=True)
#print(vendors_products_df.info())

### Plots

## Heatmaps
plt.figure(figsize=(10,10))
sb.heatmap(cve_df.corr())
plt.savefig('.\\graphs\\correlation-heatmaps.png')

# Products x Vendors
count_products_series = vendors_products_df.groupby('vendor').count()['product']
count_products_series = count_products_series.sort_values(ascending=False)
# print(count_products_series.info())
# print(count_products_series.head())

plt.figure(figsize=(10,10))
plt.xlabel('Vendor')
plt.ylabel('Number of products')
plt.xticks(rotation=45)
plt.bar(count_products_series.index[:10], count_products_series[:10])
plt.title('Products x Vendor')
plt.savefig('.\\graphs\\vendor-x-products.png')

# Vulnerabilities x product
count_vuln_series = products_df.groupby('vulnerable_product').count()['cve_id']
count_vuln_series = count_vuln_series.sort_values(ascending=False)
print(count_vuln_series[:10])
print(count_vuln_series.index[:10].to_list())
print(rename_products(count_vuln_series.index[:20].to_list()))

fig = plt.figure(figsize=(22,10))
plt.xlabel('Product')
plt.ylabel('Number of Vulnerabilities')
plt.bar(count_vuln_series.index[:20], count_vuln_series[:20])
plt.title('Vulnerabilities x Products')
plt.xticks(count_vuln_series.index[:20], labels=rename_products(count_vuln_series.index[:20]))
for i in range(len(count_vuln_series.index[:20])):
    plt.text(i, count_vuln_series[i]//2, count_vuln_series[i], ha = 'center', 
        bbox = dict(facecolor = 'white', alpha = .5))
plt.savefig('.\\graphs\\vuln-x-products.png')

# Vulns by CVSS Classification 2.0 and 3.0
# CVSS v2.0 Ratings: Low 0.0-3.9, Medium 4.0-6.9, High 7.0-10.0
# CVSS v3.0 Ratings: None 0.0, Low 0.1-3.9, Medium 4.0-6.9, High 7.0-8.9, Critical  9.0-10.0
cvss_2_low_mask = (cve_df['cvss'] >= 0.0) & (cve_df['cvss'] < 4.0)
cvss_2_medium_mask = (cve_df['cvss'] >= 4.0) & (cve_df['cvss'] < 7.0)
cvss_2_high_mask = cve_df['cvss'] >= 7.0

cvss_3_none_mask = (cve_df['cvss'] >= 0.0) & (cve_df['cvss'] < 0.1)
cvss_3_low_mask = (cve_df['cvss'] >= 0.1) & (cve_df['cvss'] < 4.0)
cvss_3_medium_mask = (cve_df['cvss'] >= 4.0) & (cve_df['cvss'] < 7.0)
cvss_3_high_mask = (cve_df['cvss'] >= 7.0) & (cve_df['cvss'] < 9.0)
cvss_3_critical_mask = cve_df['cvss'] >= 9.0

cve_df.loc[cvss_2_low_mask, 'cvss-2'] = 'low'
cve_df.loc[cvss_2_medium_mask, 'cvss-2'] = 'medium'
cve_df.loc[cvss_2_high_mask, 'cvss-2'] = 'high'
cve_df.loc[cvss_3_none_mask, 'cvss-3'] = 'none'
cve_df.loc[cvss_3_low_mask, 'cvss-3'] = 'low'
cve_df.loc[cvss_3_medium_mask, 'cvss-3'] = 'medium'
cve_df.loc[cvss_3_high_mask, 'cvss-3'] = 'high'
cve_df.loc[cvss_3_critical_mask, 'cvss-3'] = 'critical'

count_vuln_series = cve_df.groupby('cvss-2').count()['cve_id']

labels = []
for i in count_vuln_series.index.to_list():
    labels.append(f'{i.capitalize()}: {count_vuln_series[i]}')

plt.figure(figsize=(8,6)) # Graph sizing
plt.title('Vulns classified with CVSS 2.0 rating')
plt.pie(count_vuln_series, labels=labels, autopct='%.2f%%')
plt.legend(loc='lower right') # Print legend
plt.savefig('.\\graphs\\vuln-cvss-2.png')

count_vuln_series = cve_df.groupby('cvss-3').count()['cve_id']
labels = []
for i in count_vuln_series.index.to_list():
    labels.append(f'{i.capitalize()}: {count_vuln_series[i]}')
plt.figure(figsize=(8,6)) # Graph sizing
plt.title('Vulns classified with CVSS 3.0 rating')
plt.pie(count_vuln_series, labels=labels, autopct='%.2f%%')
plt.legend(loc='lower right') # Print legend
plt.savefig('.\\graphs\\vuln-cvss-3.png')

# Grouping vulnerabilities by year
#cve_df['pub_year'] = datetime.strptime(cve_df['pub_date'], '%d-%m-%y').date().year()
print(cve_df.head())

# for index, row in cve_df.iterrows():
#     cve_df.loc[index,'pub_year'] = datetime.strptime(row['pub_date'], '%Y-%m-%d %H:%M:%S').year

cve_df['pub_year'] = pd.DatetimeIndex(cve_df['pub_date']).year.astype(int) #cve_df['pub_year'].astype(int)

count_vuln_series = cve_df.groupby('pub_year').count()['cve_id']

print(count_vuln_series)

plt.figure(figsize=(12,6))
plt.xlabel('Year')
plt.ylabel('Number of Vulnerabilities')
plt.plot(count_vuln_series.index, count_vuln_series)
plt.title('Vulnerabilities x Year')
plt.xticks(count_vuln_series.index[::1])
plt.savefig('.\\graphs\\vuln-x-year.png')


## Join datasets
products_cve_df = pd.merge(products_df, cve_df, on='cve_id')
products_cve_df.rename(columns={'vulnerable_product': 'product'}, inplace=True)
print(products_cve_df)
print(products_cve_df.info())


products_completed_df = pd.merge(vendors_products_df, products_cve_df, on='product')
products_completed_df.drop(columns=['id'], inplace=True)
print(products_completed_df)
print(products_completed_df.info())