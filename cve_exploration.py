#####################
# Import Libraries
#####################

import numpy as np
import os
import pandas as pd
import matplotlib.pyplot as plt
import streamlit as st
import column_descriptions as cd

#####################
# Global Variables
#####################
cve_dataframe_text= 'CVE dataframe'
products_dataframe_text = 'Products dataframe'
vendors_dataframe_text = 'Vendors dataframe'
vendors_products_dataframe_text = 'Vendors Products dataframe'

#####################
# Functions
#####################

# Function to visualize text to web page
def write_text(text):
    st.text(text)

# Function to visualize simple text to web page
def write_desc(text):
    st.write(text)

# Function to visualize dataframe to web page
def write_df(df):
    st.dataframe(df)

# Function to create a subheader to web page
def write_subheader(text):
    st.subheader(text)

#####################
# Main
#####################

project_folder = os.getcwd()

## Reading datasets
cve_df = pd.read_csv(f'{project_folder}\\data\\cve.csv')
products_df = pd.read_csv(f'{project_folder}\\data\\products.csv')
vendors_df = pd.read_csv(f'{project_folder}\\data\\vendors.csv')
vendors_products_df = pd.read_csv(f'{project_folder}\\data\\vendor_product.csv')

# Initializing web page
st.header("CVE Exploration")
write_desc('Source dataset:')
write_text('https://www.kaggle.com/datasets/andrewkronser/cve-common-vulnerabilities-and-exposures?select=cve.csv')
st.sidebar.write('Settings')

#####################
## Data Exploration
#####################

write_subheader('Data Exploration')

# CVE dataframe exploration
write_text(cve_dataframe_text)
write_desc('Dataframe cointaining all CVEs')
write_df(cve_df)
# print(cve_df.info())
# print(cve_df.describe().T)

# Add expander to hide column information if not necessary
with st.expander('Show column description'):
    for col in cve_df.columns:
        st.markdown(f"- ```{col.upper()}```: {cd.get_column_description('cve',col)}") # Using the external file to get column description

# Add expander for columns cointaning null values
with st.expander('Show advanced information'):
    for col in ['access_authentication', 'access_complexity', 'access_vector', 'impact_availability', 'impact_confidentiality', 'impact_integrity']:
        st.markdown(f"**{col.upper()}** column unique values: ```{cve_df[col].unique()}```")
    
# Products dataframe exploration
write_text(products_dataframe_text)
write_desc('Dataframe cointaining all CVEs associated to a product')
write_df(products_df)
# print(products_df.info())
# print(products_df.describe().T)

# Vendors dataframe exploration
write_text(vendors_dataframe_text)
write_desc('Dataframe cointaining all CVEs associated to a vendor')
write_df(vendors_df)
# print(vendors_df.info())
# print(vendors_df.describe().T)

# Vendors dataframe exploration
write_text(vendors_products_dataframe_text)
write_desc('Dataframe cointaining the combination between vendors and products')
write_df(vendors_products_df)
# print(vendors_products_df.info())
# print(vendors_products_df.describe().T)

#####################
## Data Cleaning
#####################

# CVE dataset cleaning

# Filling all NaN values with NONE
for col in ['access_authentication', 'access_complexity', 'access_vector', 'impact_availability', 'impact_confidentiality', 'impact_integrity']:
    cve_df[col].fillna('NONE', inplace=True)

# Remaning the first column
cve_df.rename(columns={'Unnamed: 0': 'cve_id'}, inplace=True)

# Products dataset cleaning

# Drop all NaN values
products_df.dropna(inplace=True)

# Vendors dataset cleaning

# Rename the first column
vendors_df.rename(columns={'Unnamed: 0': 'cve_id'}, inplace=True)

# Drop all NaN values
vendors_df.dropna(inplace=True)

# Vendors products dataset cleaning

# Rename the first column
vendors_products_df.rename(columns={'Unnamed: 0': 'id'}, inplace=True)

# Visualizing cleaned data

if st.sidebar.checkbox('Display final datasets'):
    write_subheader('Final datasets')
    write_desc('Final datasets to use in the project after the application of data cleaning')

    # Visualize CVE datase
    write_text(cve_dataframe_text)
    write_df(cve_df)
    with st.expander('Show activities done'):
        st.markdown("- Rename the first column to ```CVE_ID```")
        st.markdown("- Fill all NaN values as ```None```")

    write_text(products_dataframe_text)
    write_df(products_df)
    with st.expander('Show activities done'):
        st.markdown("- Drop all NaN values (42)")

    write_text(vendors_dataframe_text)
    write_df(vendors_df)
    with st.expander('Show activities done'):
        st.markdown("- Rename the first column to ```CVE_ID```")
        st.markdown("- Drop all NaN values (42)")

    write_text(vendors_products_dataframe_text)
    write_df(vendors_products_df)
    with st.expander('Show activities done'):
        st.markdown("- Rename the first column to ```ID```")