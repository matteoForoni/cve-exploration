#####################
# Import Libraries
#####################

import numpy as np
import os
import pandas as pd
import matplotlib.pyplot as plt
import streamlit as st
import seaborn as sb
import re
import column_descriptions as cd

#####################
# Global Variables
#####################
cve_dataframe_text= 'CVE dataframe'
products_dataframe_text = 'Products dataframe'
vendors_dataframe_text = 'Vendors dataframe'
vendors_products_dataframe_text = 'Vendors Products dataframe'

#####################
# Functions
#####################

# Function to visualize text to web page
def write_text(text):
    st.text(text)

# Function to visualize simple text to web page
def generic_write(text):
    st.write(text)

# Function to visualize dataframe to web page
def write_df(df):
    st.dataframe(df)

# Function to create a subheader to web page
def write_subheader(text):
    st.subheader(text)

# Function to create a title to web page
def write_title(text):
    st.title(text)

# Function to create a title to web page
def write_header(text):
    st.header(text)

# Function to write markdown code to web page
def write_md(text):
    st.markdown(text)

# Function to plot a bar chart
def bar_plot(figsize, x,y, data_range, xlabel, ylabel, title, y_ticks=[], color='#dc804b', width=0.6, xrotation=False, x_newlabels=[], y_labels=False):
    fig1 = plt.figure(figsize=figsize)
    plt.xlabel(xlabel)
    plt.ylabel(ylabel)
    plt.bar(x[:data_range], y[:data_range], color=color, width=width)
    plt.title(title)

    # Enable x ticks rotation
    if xrotation:
        plt.xticks(rotation=45)
    
    # Changing x labels
    if len(x_newlabels) != 0:
        print(x_newlabels)
        plt.xticks(x[:data_range], labels=x_newlabels)

    # Changing y labels
    if len(y_ticks) != 0:
        plt.yticks(y_ticks)

    # Adding values into bars
    if y_labels: 
        for i in range(len(x[:data_range])):
            plt.text(i, y[i]//2, y[i], ha = 'center', 
                bbox = dict(facecolor = 'white', alpha = .5))

    return fig1

# Function to change products names for plotting
def rename_products(list_of_products):
    products_label = []
    for products in list_of_products:
        #print(products)
        products = re.sub('_linux$', '', products)
        products = products.replace('_', '\n')
        products = products.title()
        products_label.append(products)
    return products_label

#####################
# Main
#####################

project_folder = os.getcwd()

## Reading datasets
cve_df = pd.read_csv(f'{project_folder}\\data\\cve.csv')
products_df = pd.read_csv(f'{project_folder}\\data\\products.csv')
vendors_df = pd.read_csv(f'{project_folder}\\data\\vendors.csv')
vendors_products_df = pd.read_csv(f'{project_folder}\\data\\vendor_product.csv')

# Initializing web page
write_title("CVE Exploration")
generic_write('Source dataset:')
write_text('https://www.kaggle.com/datasets/andrewkronser/cve-common-vulnerabilities-and-exposures?select=cve.csv')
st.sidebar.write('Settings')

#####################
## Data Exploration
#####################

write_header('Data Exploration')

#####################
# CVE dataframe exploration
write_subheader(cve_dataframe_text)
generic_write('Dataframe cointaining all CVEs')
write_df(cve_df)
# print(cve_df.info())
# print(cve_df.describe().T)

# Add expander to hide column information if not necessary
with st.expander('Show column description'):
    for col in cve_df.columns:
        write_md(f"- ```{col.upper()}```: {cd.get_column_description('cve',col)}") # Using the external file to get column description

# Add expander for columns cointaning null values
with st.expander('Show advanced information'):
    for col in ['access_authentication', 'access_complexity', 'access_vector', 'impact_availability', 'impact_confidentiality', 'impact_integrity']:
        write_md(f"**{col.upper()}** column unique values: ```{cve_df[col].unique()}```")

#####################    
# Products dataframe exploration
write_subheader(products_dataframe_text)
generic_write('Dataframe cointaining all CVEs associated to a product')
write_df(products_df)
# print(products_df.info())
# print(products_df.describe().T)

#####################
# Vendors dataframe exploration
write_subheader(vendors_dataframe_text)
generic_write('Dataframe cointaining all CVEs associated to a vendor')
write_df(vendors_df)
# print(vendors_df.info())
# print(vendors_df.describe().T)

#####################
# Vendors dataframe exploration
write_subheader(vendors_products_dataframe_text)
generic_write('Dataframe cointaining the combination between vendors and products')
write_df(vendors_products_df)
# print(vendors_products_df.info())
# print(vendors_products_df.describe().T)

#####################
## Data Cleaning
#####################

#####################
# CVE dataset cleaning

# Filling all NaN values with NONE
for col in ['access_authentication', 'access_complexity', 'access_vector', 'impact_availability', 'impact_confidentiality', 'impact_integrity']:
    cve_df[col].fillna('NONE', inplace=True)

# Remaning the first column
cve_df.rename(columns={'Unnamed: 0': 'cve_id'}, inplace=True)

#####################
# Products dataset cleaning

# Drop all NaN values
products_df.dropna(inplace=True)

#####################
# Vendors dataset cleaning

# Rename the first column
vendors_df.rename(columns={'Unnamed: 0': 'cve_id'}, inplace=True)

# Drop all NaN values
vendors_df.dropna(inplace=True)

#####################
# Vendors products dataset cleaning

# Rename the first column
vendors_products_df.rename(columns={'Unnamed: 0': 'id'}, inplace=True)

# Visualizing cleaned data
if st.sidebar.checkbox('Display final datasets'):
    write_header('Final datasets')
    generic_write('Final datasets to use in the project after the application of data cleaning')

    # Visualize CVE datase
    write_subheader(cve_dataframe_text)
    write_df(cve_df)
    with st.expander('Show activities done'):
        write_md("- Rename the first column to ```CVE_ID```")
        write_md("- Fill all NaN values as ```None```")

    write_subheader(products_dataframe_text)
    write_df(products_df)
    with st.expander('Show activities done'):
        write_md("- Drop all NaN values (42)")

    write_subheader(vendors_dataframe_text)
    write_df(vendors_df)
    with st.expander('Show activities done'):
        write_md("- Rename the first column to ```CVE_ID```")
        write_md("- Drop all NaN values (42)")

    write_subheader(vendors_products_dataframe_text)
    write_df(vendors_products_df)
    with st.expander('Show activities done'):
        write_md("- Rename the first column to ```ID```")

#####################
# Data Visualization
#####################

write_header('Plots')

#####################
# Correlation between cvss and cwe_code of cve dataset
if st.sidebar.checkbox('Display CVE datasets correlation'):
    write_subheader("CVE Dataset Correlation Matrix")
    fig1 = plt.figure(figsize=(2,1))
    sb.heatmap(cve_df.corr())
    generic_write(fig1)
    write_md("There isn't any correlation between ```CVSS``` and ```CWE_CODE``` columns")

#####################
# Plotting Number of Products per Vendors
write_subheader("Products per Vendor")
generic_write("Plotting the number of products for each vendor in the dataset")

# Grouping the data
count_products_series = vendors_products_df.groupby('vendor').count()['product']

# Slider to select the number of vendor to plot
data_range = st.slider('How many vendor do you want to plot?', 2, 20, 5, 1)

# Sorting series in decreasing order
count_products_series = count_products_series.sort_values(ascending=False)

# Create bar plot
fig1 = bar_plot((10,6), count_products_series.index, count_products_series, data_range, 'Vendors', 'Number of Products', 'Products per Vendor', np.arange(0,3000, step=800), xrotation=True)
generic_write(fig1)

#####################
# Plotting Number of Vulnerabilities for each vendor or products

write_subheader("Vulnerabilities per Products and Vendor")
generic_write("Plotting the number of vulnerabilities for each product")

# Grouping and sorting the data
count_vuln_series = products_df.groupby('vulnerable_product').count()['cve_id']
count_vuln_series = count_vuln_series.sort_values(ascending=False)

# Slider to select the number of products to plot
products_data_range = st.slider('How many products do you want to plot?', 2, 20, 5, 1)

# Create bar plot

# to_list() function necessary to convert pandas Index object to a list of values
products_renamed = rename_products(count_vuln_series.index[:products_data_range].to_list())

fig1 = bar_plot((22,10), count_vuln_series.index, count_vuln_series, products_data_range, 'Products', 'Number of Vulnerabilities', 'Vulnerabilities per Products', color='#85e085', x_newlabels=products_renamed, y_labels=True)
generic_write(fig1)